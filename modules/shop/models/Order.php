<?php

namespace modules\shop\models;

use common\models\Config;
use common\models\PaymentSystem;
use common\models\User;
use Yii;
use yii\base\Exception;
use yii\db\ActiveQuery;
use yii\db\ActiveRecord;
use yii\helpers\Html;

/**
 * This is the model class for table "shop_order".
 *
 * @property int $id
 * @property int $user_id
 * @property int $status
 * @property string $comment
 * @property string $fio
 * @property string $phone
 * @property string $email
 * @property string $country
 * @property string $city
 * @property string $address
 * @property string $village
 * @property string $track
 * @property string $payment_status
 * @property int $payment_id
 * @property int $type
 * @property int $promocode_id
 * @property string $price Цена только товаров, без допуслуг
 * @property string $price_after_promocode Цена после применения промокода
 * @property string $referrer_bonus
 * @property int $referrer_id
 * @property string $partner_percent
 * @property string $created_at
 * @property string $updated_at
 *
 * @property PaymentSystem $payment
 * @property User $user
 * @property User $referrer
 * @property OrderItem[] $orderItems
 * @property Item[] $items
 * @property Promocode $promocode
 * @property OrderService[] $orderServices
 * @property Service[] $services
 */
class Order extends ActiveRecord
{
    public const STATUS_NEW = 1;
    public const STATUS_PAYED = 2;
    public const STATUS_IN_PROGRESS = 3;
    public const STATUS_SEND = 4;
    public const STATUS_DONE = 5;
    public const STATUS_CANCEL = 6;

    public const TYPE_SHOP = 0;
    public const TYPE_API = 1;

    public const STATUSES = [
        self::STATUS_NEW         => 'Новый',
        self::STATUS_PAYED       => 'Оплачен',
        self::STATUS_IN_PROGRESS => 'Выполняется',
        self::STATUS_SEND        => 'Отправлен',
        self::STATUS_DONE        => 'Выполнен',
        self::STATUS_CANCEL      => 'Отменен'
    ];

    const PAYMENT_DONE = 1;
    const PAYMENT_WAIT = 0;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'shop_order';
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->created_at = date('Y-m-d H:i:s', time());
        } else {
            if ($this->oldAttributes['status'] != $this->status && $this->status != Order::STATUS_NEW) {
                if ($this->status == self::STATUS_PAYED) {
                    // если есть реферер, то при переходе в статус оплачен начисляем бонусы
                    $referrer = $this->user->referrer;
                    if ($referrer) {
                        $percent = floatval(Config::getValue('referrer_percent')) ?? 0;
                        $amount = $this->price / 100 * $percent;
                        $referrer->bonus_total += $amount;
                        $this->referrer_id = $referrer->id;
                        $this->referrer_bonus = $amount;
                        if (!$referrer->save()) {
                            throw new Exception('Ошибка добавления бонуса рефереру');
                        };
                    }
                }
                $mail = Yii::$app->mailer->compose('order-status-changed', ['model' => $this]);
                $mail->setFrom([Yii::$app->params['supportEmail'] => Yii::$app->name]);
                $mail->setTo($this->email);
                if ($this->status == Order::STATUS_PAYED) {
                    $mail->setBcc(Config::getValue('requestEmail'));
                }
                $mail->setSubject('Изменение статуса заказа №'.$this->id);
                $mail->send();
            }
        }
        $this->updated_at = date('Y-m-d H:i:s', time());
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['user_id', 'status', 'payment_id', 'payment_status', 'referrer_id', 'promocode_id'], 'integer'],
            [['price', 'partner_percent', 'referrer_bonus', 'price_after_promocode'], 'number'],
            [['created_at', 'updated_at'], 'safe'],
            [['comment', 'village'], 'string', 'max' => 800],
            [['fio', 'country', 'city', 'address', 'track'], 'string', 'max' => 255],
            [['phone', 'email'], 'string', 'max' => 50],
            [['payment_id'], 'exist', 'skipOnError' => true, 'targetClass' => PaymentSystem::className(), 'targetAttribute' => ['payment_id' => 'id']],
            [['referrer_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['referrer_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'                    => 'ID',
            'user_id'               => 'Покупатель',
            'status'                => 'Статус',
            'comment'               => 'Комментарий (виден только админу)',
            'fio'                   => 'ФИО',
            'phone'                 => 'Телефон',
            'email'                 => 'Email',
            'country'               => 'Страна',
            'city'                  => 'Город',
            'address'               => 'Адрес',
            'village'               => 'Дополнительная информация',
            'payment_id'            => 'Платежная система',
            'price'                 => 'Цена',
            'referrer_id'           => 'Реферер',
            'referrer_bonus'        => 'Выплата рефереру',
            'partner_percent'       => 'Отчисление партнеру',
            'track'                 => 'Код отслеживания',
            'created_at'            => 'Дата',
            'promocode_id'          => 'Промокод',
            'price_after_promocode' => 'Цена после применения промокода',
            'payment_status'        => 'Статус партнерского вознаграждения',
            'updated_at'            => 'Updated At',
        ];
    }

    /**
     * @return ActiveQuery
     */
    public function getPayment()
    {
        return $this->hasOne(PaymentSystem::className(), ['id' => 'payment_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(User::className(), ['id' => 'user_id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getOrderItems()
    {
        return $this->hasMany(OrderItem::className(), ['order_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getItems()
    {
        return $this->hasMany(Item::className(), ['id' => 'item_id'])->viaTable('shop_order_item', ['order_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getOrderServices()
    {
        return $this->hasMany(OrderService::className(), ['order_id' => 'id']);
    }

    /**
     * @return ActiveQuery
     */
    public function getServices()
    {
        return $this->hasMany(Service::className(), ['id' => 'service_id'])->viaTable('shop_order_service', ['order_id' => 'id']);
    }

    /**
     * Создание заказа
     * @param        $fio
     * @param  User  $user
     * @param        $email
     * @param        $phone
     * @param        $country
     * @param        $city
     * @param        $address
     * @param        $api
     * @param  string  $village
     * @return Order|null
     */
    public static function createOrder($fio, User $user, $email, $phone, $country, $city, $address, $village = '', $api = false)
    {
        $profile = $user->profile;
        $order = new self();
        $order->user_id = $user->id;
        if ($api) {
            $order->fio = Html::encode($fio);
            $order->email = Html::encode($email);
            $order->phone = Html::encode($phone);
            $order->country = Html::encode($country);
            $order->city = Html::encode($city);
            $order->address = Html::encode($address);
            $order->type = self::TYPE_API;
        } else {
            $order->fio = $fio ? Html::encode($fio) : $profile->fio;
            $order->email = $email ? Html::encode($email) : $user->email;
            $order->phone = $phone ? Html::encode($phone) : $profile->phone;
            $order->country = $country ? Html::encode($country) : $profile->country;
            $order->city = $city ? Html::encode($city) : $profile->city;
            $order->type = self::TYPE_SHOP;
            $order->address = $address ? Html::encode($address) : $profile->address;
        }
        $order->village = Html::encode($village);
        $order->status = self::STATUS_NEW;
        if ($order->save()) {
            return $order;
        }
        return null;
    }

    /**
     * Добавление товаров к заказу
     * @param  array  $data
     * @return float|int
     */
    public function addItems(array $data)
    {
        $amount = 0;
        foreach ($data as $item) {
            $itemModel = Item::findActiveItem($item['id']);
            if ($itemModel) {
                $albumPrice = (int) Config::getValue('albumPrice');
                $itemPrice = $itemModel->getPrice();
                $price = $itemPrice + $albumPrice * ((int) $item['count'] > 0 ? (int) $item['count'] - 1 : 0);
                $orderItem = new OrderItem();
                $orderItem->order_id = $this->id;
                $orderItem->item_id = (int) $item['id'];
                $orderItem->count = (int) $item['count'];
                $orderItem->price = $price;
                if ((int) $item['change']) {
                    $orderItem->comment = 'Требуется изменить материал';
                    $orderItem->change_material = 1;
                }
                if ($orderItem->save()) {
                    $amount += $price;
                }
            }
        }
        return $amount;
    }

    /**
     * Добавление услуг к заказу
     * @param  array  $data
     * @return float|int
     */
    public function addServices(array $data)
    {
        $amount = 0;
        foreach ($data as $serviceId) {
            $service = Service::findOne((int) $serviceId);
            if ($service) {
                $orderService = new OrderService();
                $orderService->order_id = $this->id;
                $orderService->service_id = $service->id;
//                $orderService->price = $service->price;
                $orderService->price = 0;
                if ($orderService->save()) {
                    $amount += $service->price;
                }
            }
        }
        return 0;
    }

    /**
     * @return ActiveQuery
     */
    public function getReferrer()
    {
        return $this->hasOne(User::className(), ['id' => 'referrer_id']);
    }

    /**
     * @return array
     */
    public static function getStatusList()
    {
        return self::STATUSES;
    }

    public static function getStatusName($status)
    {
        return self::STATUSES[$status];
    }

    public function getPromocode()
    {
        return $this->hasOne(Promocode::className(), ['id' => 'promocode_id']);
    }
}
